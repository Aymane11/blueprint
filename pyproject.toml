[tool.poetry]
name        = "blueprint"
version     = "0.1.0"
description = "A blueprint template for Python projects."
authors     = ["Aymane Boumaaza <aymaneboumaaza@gmail.com>"]
license     = "MIT"
readme      = "README.md"

[tool.poetry.dependencies]
python        = "^3.8"
python-dotenv = "^0.19.2"

[tool.poetry.dev-dependencies]
flake8     = "^4.0.1"
black      = "^22.1.0"
pytest-cov = "^3.0.0"
pytest     = "^5.2"
pre-commit = "^2.17.0"
poethepoet = "^0.13.1"
pylint     = "^2.12.2"
bandit     = "^1.7.4"
autoflake  = "^1.4"

[tool.poe.tasks]

format = {cmd = "black .", help = "Format the code using black" }
bandit = {cmd = "bandit -c bandit.yaml -r blueprint/ tests/", help = "Check for code security issues using bandit"}
pylint = {cmd = "pylint blueprint/ tests/", help = "Lint the code using pylint"}
flake8 = {cmd = "flake8 blueprint/* tests/*", help = "Lint the code using flake8"}
autoflake = {cmd = "autoflake --in-place --recursive --remove-all-unused-imports --expand-star-imports --ignore-init-module-imports blueprint/* tests/*", help = "Remove unused imports"}
test = {cmd = "pytest -v --cov=blueprint --cov-report=term", help = "Run unit tests with coverage"}
pre-commit = {cmd = "pre-commit run --files */* *", help = "Run pre-commit hooks before staging"}
all = { sequence = ["format", "bandit", "pylint", "flake8", "autoflake", "test", "pre-commit"], ignore_fail = true, help = "Run all checks"}


[build-system]
requires      = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
